/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PeerConnection as PrismaPeerConnection,
  Stream as PrismaStream,
} from "@prisma/client";

export class PeerConnectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PeerConnectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.peerConnection.count(args);
  }

  async peerConnections<T extends Prisma.PeerConnectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeerConnectionFindManyArgs>
  ): Promise<PrismaPeerConnection[]> {
    return this.prisma.peerConnection.findMany<Prisma.PeerConnectionFindManyArgs>(
      args
    );
  }
  async peerConnection<T extends Prisma.PeerConnectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeerConnectionFindUniqueArgs>
  ): Promise<PrismaPeerConnection | null> {
    return this.prisma.peerConnection.findUnique(args);
  }
  async createPeerConnection<T extends Prisma.PeerConnectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeerConnectionCreateArgs>
  ): Promise<PrismaPeerConnection> {
    return this.prisma.peerConnection.create<T>(args);
  }
  async updatePeerConnection<T extends Prisma.PeerConnectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeerConnectionUpdateArgs>
  ): Promise<PrismaPeerConnection> {
    return this.prisma.peerConnection.update<T>(args);
  }
  async deletePeerConnection<T extends Prisma.PeerConnectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeerConnectionDeleteArgs>
  ): Promise<PrismaPeerConnection> {
    return this.prisma.peerConnection.delete(args);
  }

  async getStream(parentId: string): Promise<PrismaStream | null> {
    return this.prisma.peerConnection
      .findUnique({
        where: { id: parentId },
      })
      .stream();
  }
}
