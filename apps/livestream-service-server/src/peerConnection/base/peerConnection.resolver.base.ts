/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PeerConnection } from "./PeerConnection";
import { PeerConnectionCountArgs } from "./PeerConnectionCountArgs";
import { PeerConnectionFindManyArgs } from "./PeerConnectionFindManyArgs";
import { PeerConnectionFindUniqueArgs } from "./PeerConnectionFindUniqueArgs";
import { CreatePeerConnectionArgs } from "./CreatePeerConnectionArgs";
import { UpdatePeerConnectionArgs } from "./UpdatePeerConnectionArgs";
import { DeletePeerConnectionArgs } from "./DeletePeerConnectionArgs";
import { Stream } from "../../stream/base/Stream";
import { PeerConnectionService } from "../peerConnection.service";
@graphql.Resolver(() => PeerConnection)
export class PeerConnectionResolverBase {
  constructor(protected readonly service: PeerConnectionService) {}

  async _peerConnectionsMeta(
    @graphql.Args() args: PeerConnectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PeerConnection])
  async peerConnections(
    @graphql.Args() args: PeerConnectionFindManyArgs
  ): Promise<PeerConnection[]> {
    return this.service.peerConnections(args);
  }

  @graphql.Query(() => PeerConnection, { nullable: true })
  async peerConnection(
    @graphql.Args() args: PeerConnectionFindUniqueArgs
  ): Promise<PeerConnection | null> {
    const result = await this.service.peerConnection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PeerConnection)
  async createPeerConnection(
    @graphql.Args() args: CreatePeerConnectionArgs
  ): Promise<PeerConnection> {
    return await this.service.createPeerConnection({
      ...args,
      data: {
        ...args.data,

        stream: args.data.stream
          ? {
              connect: args.data.stream,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PeerConnection)
  async updatePeerConnection(
    @graphql.Args() args: UpdatePeerConnectionArgs
  ): Promise<PeerConnection | null> {
    try {
      return await this.service.updatePeerConnection({
        ...args,
        data: {
          ...args.data,

          stream: args.data.stream
            ? {
                connect: args.data.stream,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PeerConnection)
  async deletePeerConnection(
    @graphql.Args() args: DeletePeerConnectionArgs
  ): Promise<PeerConnection | null> {
    try {
      return await this.service.deletePeerConnection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Stream, {
    nullable: true,
    name: "stream",
  })
  async getStream(
    @graphql.Parent() parent: PeerConnection
  ): Promise<Stream | null> {
    const result = await this.service.getStream(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
