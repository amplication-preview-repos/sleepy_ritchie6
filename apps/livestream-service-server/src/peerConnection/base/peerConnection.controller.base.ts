/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PeerConnectionService } from "../peerConnection.service";
import { PeerConnectionCreateInput } from "./PeerConnectionCreateInput";
import { PeerConnection } from "./PeerConnection";
import { PeerConnectionFindManyArgs } from "./PeerConnectionFindManyArgs";
import { PeerConnectionWhereUniqueInput } from "./PeerConnectionWhereUniqueInput";
import { PeerConnectionUpdateInput } from "./PeerConnectionUpdateInput";

export class PeerConnectionControllerBase {
  constructor(protected readonly service: PeerConnectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PeerConnection })
  async createPeerConnection(
    @common.Body() data: PeerConnectionCreateInput
  ): Promise<PeerConnection> {
    return await this.service.createPeerConnection({
      data: {
        ...data,

        stream: data.stream
          ? {
              connect: data.stream,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        status: true,

        stream: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PeerConnection] })
  @ApiNestedQuery(PeerConnectionFindManyArgs)
  async peerConnections(
    @common.Req() request: Request
  ): Promise<PeerConnection[]> {
    const args = plainToClass(PeerConnectionFindManyArgs, request.query);
    return this.service.peerConnections({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,

        stream: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PeerConnection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async peerConnection(
    @common.Param() params: PeerConnectionWhereUniqueInput
  ): Promise<PeerConnection | null> {
    const result = await this.service.peerConnection({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,

        stream: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PeerConnection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePeerConnection(
    @common.Param() params: PeerConnectionWhereUniqueInput,
    @common.Body() data: PeerConnectionUpdateInput
  ): Promise<PeerConnection | null> {
    try {
      return await this.service.updatePeerConnection({
        where: params,
        data: {
          ...data,

          stream: data.stream
            ? {
                connect: data.stream,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          status: true,

          stream: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PeerConnection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePeerConnection(
    @common.Param() params: PeerConnectionWhereUniqueInput
  ): Promise<PeerConnection | null> {
    try {
      return await this.service.deletePeerConnection({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,

          stream: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
